name: "DBO App Publish"

on:
  workflow_dispatch:

env:
  CI: false
  NODE_OPTIONS: "--max_old_space_size=4096"

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}
      package_version: ${{ steps.get-version.outputs.version }}

    steps:
      - uses: actions/checkout@v4

      - name: Get Version from File
        id: get-version
        run: |
          VERSION=$(cat docs/scripts/VERSION || echo "0.0.0")
          echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create GitHub Release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const version = process.env.PACKAGE_VERSION;
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${version}`,
              name: `v${version}`,
              body: 'Check the assets to download and install the app.',
              draft: true,
              prerelease: false
            });
            return data.id;

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest"
            args: "--target aarch64-apple-darwin"
          - platform: "macos-13"
            args: "--target x86_64-apple-darwin"
          - platform: "ubuntu-22.04"
            args: ""
          - platform: "windows-latest"
            args: ""

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Dependencies (Ubuntu Only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: ./frontend/package-lock.json
     
      - name: Install Frontend Dependencies
        run: npm install --force
        working-directory: ./frontend

      - name: Build Frontend with Version
        run: npm run build
        working-directory: ./frontend
        env:
          VITE_VERSION: ${{ env.PACKAGE_VERSION }}

      - uses: actions/setup-go@v5
        with:
          go-version: 1.23
          check-latest: true

      - name: Build Go Backend
        run: bash ./docs/scripts/build_backend.sh

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ (matrix.platform == 'macos-latest' || matrix.platform == 'macos-13') && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust Cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./desktop -> target"

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          tagName: "v${{ env.PACKAGE_VERSION }}"
          releaseName: "v${{ env.PACKAGE_VERSION }}"
          releaseBody: "See full changelog at https://github.com/dbo-studio/dbo/releases"
          releaseDraft: true
          args: ${{ matrix.args }}
          projectPath: "./desktop"
          includeUpdaterJson: true
          appVersion: ${{ env.PACKAGE_VERSION }}

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [create-release, build-tauri]

    steps:
      - name: Publish Release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            });
  
      - name: Sync Release to Website
        run: |
          echo "Syncing release v${{ env.PACKAGE_VERSION }} to website..."
          curl -X POST ${{ secrets.WEBSITE_SYNC_URL }}/api/sync-releases/${{ needs.create-release.outputs.release_id }} \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.API_SYNC_TOKEN }}"
        env:
          WEBSITE_SYNC_URL: ${{ secrets.WEBSITE_SYNC_URL }}